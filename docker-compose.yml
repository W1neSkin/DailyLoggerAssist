version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: dailylogger
      POSTGRES_USER: dailylogger
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dailylogger -d dailylogger"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dailylogger-network

  # Redis
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dailylogger-network

  # API Gateway
  gateway-service:
    build:
      context: .
      dockerfile: services/gateway-service/Dockerfile
    environment:
      - DATABASE_URL=postgresql://dailylogger:password@postgres:5432/dailylogger
      - REDIS_URL=redis://:password@redis:6379
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - ENVIRONMENT=development
      - USER_SERVICE_URL=http://user-service:8001
      - DATA_COLLECTION_SERVICE_URL=http://data-collection-service:8002
      - AI_PROCESSING_SERVICE_URL=http://ai-processing-service:8003
      - REPORTING_SERVICE_URL=http://reporting-service:8004
      - NOTIFICATION_SERVICE_URL=http://notification-service:8005
    ports:
      - "8001:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./shared:/app/shared
    networks:
      - dailylogger-network

  # User Service
  user-service:
    build:
      context: .
      dockerfile: services/user-service/Dockerfile
    environment:
      - DATABASE_URL=postgresql://dailylogger:password@postgres:5432/dailylogger
      - REDIS_URL=redis://:password@redis:6379
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - ENVIRONMENT=development
    ports:
      - "8002:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./shared:/app/shared
    networks:
      - dailylogger-network

  # Data Collection Service
  data-collection-service:
    build:
      context: .
      dockerfile: services/data-collection-service/Dockerfile
    environment:
      - DATABASE_URL=postgresql://dailylogger:password@postgres:5432/dailylogger
      - REDIS_URL=redis://:password@redis:6379
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - ENVIRONMENT=development
    ports:
      - "8003:8002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./shared:/app/shared
    networks:
      - dailylogger-network

  # AI Processing Service
  ai-processing-service:
    build:
      context: .
      dockerfile: services/ai-processing-service/Dockerfile
    environment:
      - DATABASE_URL=postgresql://dailylogger:password@postgres:5432/dailylogger
      - REDIS_URL=redis://:password@redis:6379
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - ENVIRONMENT=development
    ports:
      - "8004:8003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./shared:/app/shared
    networks:
      - dailylogger-network

  # Reporting Service
  reporting-service:
    build:
      context: .
      dockerfile: services/reporting-service/Dockerfile
    environment:
      - DATABASE_URL=postgresql://dailylogger:password@postgres:5432/dailylogger
      - REDIS_URL=redis://:password@redis:6379
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - ENVIRONMENT=development
    ports:
      - "8005:8004"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./shared:/app/shared
    networks:
      - dailylogger-network

  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: services/notification-service/Dockerfile
    environment:
      - DATABASE_URL=postgresql://dailylogger:password@postgres:5432/dailylogger
      - REDIS_URL=redis://:password@redis:6379
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - ENVIRONMENT=development
    ports:
      - "8006:8005"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./shared:/app/shared
    networks:
      - dailylogger-network

  # Data Source Service
  data-source-service:
    build:
      context: .
      dockerfile: services/data-source-service/Dockerfile
    environment:
      - DATABASE_URL=postgresql://dailylogger:password@postgres:5432/dailylogger
      - REDIS_URL=redis://:password@redis:6379
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - ENVIRONMENT=development
    ports:
      - "8007:8006"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./shared:/app/shared
    networks:
      - dailylogger-network

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - REACT_APP_API_URL=http://localhost:8001
      - REACT_APP_ENVIRONMENT=development
    ports:
      - "3000:3000"
    depends_on:
      - gateway-service
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    networks:
      - dailylogger-network

  # Nginx (for production-like setup)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./frontend/build:/usr/share/nginx/html
    depends_on:
      - frontend
      - gateway-service
    networks:
      - dailylogger-network

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - dailylogger-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - dailylogger-network

volumes:
  postgres_data:
  redis_data:
  grafana_data:

networks:
  dailylogger-network:
    driver: bridge 